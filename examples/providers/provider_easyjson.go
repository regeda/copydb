// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package providers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdd9f62fDecodeGithubComRegedaCopydbExamplesProviders(in *jlexer.Lexer, out *Provider) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Coord":
			(out.Coord).UnmarshalEasyJSON(in)
		case "Status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdd9f62fEncodeGithubComRegedaCopydbExamplesProviders(out *jwriter.Writer, in Provider) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Coord\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Coord).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Provider) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdd9f62fEncodeGithubComRegedaCopydbExamplesProviders(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Provider) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdd9f62fEncodeGithubComRegedaCopydbExamplesProviders(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Provider) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdd9f62fDecodeGithubComRegedaCopydbExamplesProviders(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Provider) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdd9f62fDecodeGithubComRegedaCopydbExamplesProviders(l, v)
}
func easyjsonDdd9f62fDecodeGithubComRegedaCopydbExamplesProviders1(in *jlexer.Lexer, out *Coordinate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Point":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 2 {
						(out.Point)[v1] = float64(in.Float64())
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ts).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdd9f62fEncodeGithubComRegedaCopydbExamplesProviders1(out *jwriter.Writer, in Coordinate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Point\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v2 := range in.Point {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64((in.Point)[v2]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"Ts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ts).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Coordinate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdd9f62fEncodeGithubComRegedaCopydbExamplesProviders1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Coordinate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdd9f62fEncodeGithubComRegedaCopydbExamplesProviders1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Coordinate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdd9f62fDecodeGithubComRegedaCopydbExamplesProviders1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Coordinate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdd9f62fDecodeGithubComRegedaCopydbExamplesProviders1(l, v)
}
